<link rel="stylesheet" href="https://unpkg.com/swiper@7/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper@7/swiper-bundle.min.js"></script>

{% assign selected_variant = product.selected_or_first_available_variant %}

<style>
  .product-image {
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }

  .noselect {
    -webkit-touch-callout: none;
    /* iOS Safari */
    -webkit-user-select: none;
    /* Safari */
    -khtml-user-select: none;
    /* Konqueror HTML */
    -moz-user-select: none;
    /* Old versions of Firefox */
    -ms-user-select: none;
    /* Internet Explorer/Edge */
    user-select: none;
  }

  .colors {
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
    gap: 10px;

    li {
      height: 50px;
    }
  }

</style>

<div class="md:cwidth my-8">
  <div class="product w-full">

    <div class="product--information sticky top-5 md:p-2 w-full">
      {% form 'product'
        , product
        , id: 'product-form'
        , novalidate: 'novalidate' %}
        <input
          type="hidden"
          name="id"
          value="{{ selected_variant.id }}">

        <div class="cwidth mx-auto flex flex-col md:flex-row justify-between items-start">
          <div class="w-full md:w-[20%] mb-8">
            <div class="mb-8 block md:hidden swiper">
              <div class="swiper-wrapper">
                {% for media in product.media %}
                  <div class="swiper-slide">
                    <div class="product-image w-full h-[300px]" style="background-image: url({{ media | img_url: "master"}})"></div>
                  </div>
                {% endfor %}
              </div>

              <div class="hidden w-full absolute top-[50px] bottom-0 flex items-center">
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
              </div>
            </div>

            <div>
              <h2 class="text-lg font-bold uppercase">{{ product.title }}</h2>

              <hr class="text-[#E5E7EB] my-4" />

              <p>{{ product.description | strip_html }}</p>
            </div>
          </div>

          <div class="w-full md:w-[50%]">

            <div class="hidden md:block h-screen overflow-hidden">
              {% for media in product.media %}
                <div class="product-image w-full h-screen mb-10" style="background-image: url({{ media | img_url: "master"}})"></div>
              {% endfor %}
            </div>
          </div>

          <div class="w-full md:w-[20%] mb-8">
            <h2 class="text-lg font-bold uppercase">{{ product.price | money_with_currency }}</h2>

            <hr class="text-[#E5E7EB] my-4" />

            <p>Estimated production and delivery time 5-8 weeks</p>

            <div class="my-3">
              {% unless product.has_only_default_variant %}
                <variant-selector data-url="{{ product.url}}" data-section="{{ section.id }}">
                  {% for option in product.options_with_values %}
                    <label class="text-[#6B7280] block mt-4" for="Option-{{ section.id }}-{{ forloop.index0 }}">{{ option.name }}</label>

                    {% if option.name != "Color" %}
                      <div class="my-4 relative">
                        <div
                          class="custom-select flex justify-between items-center w-full pr-3 font-bold outline-none appearance-none cursor-pointer noselect"
                          role="button"
                          id="Option-{{ section.id }}-{{ forloop.index0 }}"
                          data-option-name="{{ option.name | escape }}">
                          <div class="selected-option" data-selected="{{ option.selected_value }}">
                            {{ option.selected_value }}
                          </div>
                          <div class="dropdown-arrow !text-[#6B7280]">
                            {% render "icon-down" %}
                          </div>
                        </div>
                        <ul class="custom-options hidden w-full bg-white mt-1 z-10">
                          {% for value in option.values %}
                            <li
                              class="option-item py-2 text-[#6B7280] hover:text-black cursor-pointer"
                              data-value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                              data-selected="true"
                              {% endif %}>
                              {{ value }}
                            </li>
                          {% endfor %}
                        </ul>
                      </div>

                    {% else %}
                      <div class="my-4 relative">
                        <div
                          class="custom-select flex justify-between items-center w-full pr-3 font-bold outline-none appearance-none cursor-pointer noselect"
                          role="button"
                          id="Option-{{ section.id }}-{{ forloop.index0 }}"
                          data-option-name="{{ option.name | escape }}">
                          <div class="selected-option flex flex-row-reverse justify-center items-center gap-2" data-selected="{{ option.selected_value }}">
                            <p>{{ option.selected_value }}</p>
                            <div class="h-[25px] w-[25px]" style="background-color: {{ option.selected_value }};"></div>
                          </div>
                          <div class="dropdown-arrow !text-[#6B7280]">
                            {% render "icon-down" %}
                          </div>
                        </div>
                        <ul class="custom-options colors grid hidden w-full bg-white mt-1 z-10">
                          {% for value in option.values %}
                            <li
                              class="option-item py-2 text-[#6B7280] hover:text-black cursor-pointer"
                              style="background-color: {{ value }};"
                              data-value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                              data-selected="true"
                              {% endif %}>
                              <span class="hidden">{{ value }}</span>
                            </li>
                          {% endfor %}
                        </ul>
                      </div>
                    {% endif %}

                    <script type="application/json">
                      {{ product.variants | json }}
                    </script>
                  {% endfor %}
                </variant-selector>
              {% endunless %}
            </div>

            <div class="my-3">
              <button
                type="submit"
                name="add"
                class="flex items-center justify-center gap-2 w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 hover:text-white rounded-sm my-2"
                {% if selected_variant.available == false %}
                disabled
                {% endif %}>
                {% render "cart" %}
                {% if selected_variant.available == false %}
                  Sold out
                {% else %}
                  Add to cart
                {% endif %}
              </button>

              {% render "button-wishlist", product: product %}
            </div>
          </div>
        </div>

      {% endform %}
    </div>
  </div>

</div>

<div id="add-to-cart-popup" class="hidden z-10 fixed inset-0 flex items-start md:items-center justify-center bg-black bg-opacity-50">
  <div class="bg-white p-4 rounded shadow-md w-full md:w-[400px]">
    <div class="flex justify-between items-center mb-4">
      <p class="uppercase font-bold">Added to your cart!</p>
      <button id="close-popup" class="">{% render "icon-close" %}</button>
    </div>
    <div class="flex items-center justify-start gap-4">
      {% if selected_variant.image.src %}
        <img src="{{ selected_variant.image.src | img_url: '100x' }}" alt="{{ selected_variant.title }}" />
      {% endif %}

      <div class="flex flex-col items-between">
        <p class="font-bold">{{ selected_variant.title }}</p>
        <div class="flex gap-2 items-center overflow-hidden">
          {% for tag in product.collections %}
            <p>{{ tag.title }}</p>
          {% endfor %}
        </div>
        <p class="text-[18px]">{{ selected_variant.price | money_with_currency }}</p>
      </div>
    </div>
    <div class="flex justify-between items-center gap-2 mt-4">
      <a href="{{ routes.all_products_collection_url }}" class="text-center font-bold w-full px-4 py-2 text-black hover:text-white bg-white hover:bg-black border border-solid border-black">Continue Shopping</a>
      <a href="{{ routes.cart_url }}" class="text-center font-bold w-full px-4 py-2 hover:text-black text-white hover:bg-white bg-black border border-solid border-black">Go to your cart</a>
    </div>
  </div>
</div>

{% schema %}
  {
    "name": "Product",
    "blocks": [
      {
        "type": "vendor",
        "name": "Vendor",
        "limit": 1
      },
      {
        "type": "title",
        "name": "Title",
        "limit": 1
      },
      {
        "type": "price",
        "name": "Price",
        "limit": 1
      },
      {
        "type": "variant_selector",
        "name": "Variant Selector",
        "limit": 1
      }, {
        "type": "quantity",
        "name": "Quantity",
        "limit": 1
      }, {
        "type": "description",
        "name": "Description",
        "limit": 1
      }, {
        "type": "checkout_buttons",
        "name": "Checkout Buttons",
        "limit": 1
      }, {
        "type": "breadcrumbs",
        "name": "Breadcrumbs",
        "limit": 1
      }
    ]
  }
{% endschema %}

{% comment %} Cancel cart immediate redirect {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('product-form');
  const popup = document.getElementById('add-to-cart-popup');
  const closePopupBtn = document.getElementById('close-popup');
  
    form.addEventListener('submit', function(event) {
      event.preventDefault(); // Prevent the default form submission
    
      const formData = new FormData(form);
      const actionUrl = '/cart/add.js'; // Shopify add-to-cart endpoint
    
      fetch(actionUrl, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json', // Ensure JSON response
        }
      })
      .then(response => {
        if (!response.ok) {
          return response.text().then(text => { throw new Error(text) });
        }
        return response.json();
      })
      .then(data => {
        // Show the popup
        popup.classList.remove('hidden');
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred. Please try again.');
      });
    });
    
    closePopupBtn.addEventListener('click', function() {
      popup.classList.add('hidden');
    });
  });
</script>

{% comment %} Custom select script {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.custom-select').forEach(function(select) {
    const selectedOption = select.querySelector('.selected-option');
    const optionsList = select.nextElementSibling;
    const optionItems = optionsList.querySelectorAll('.option-item');
    const form = document.getElementById('product-form');
  
    select.addEventListener('click', function() {
      optionsList.classList.toggle('hidden');
    });
  
    optionItems.forEach(function(option) {
      option.addEventListener('click', function() {
  
        const color = document.createElement('div');
        
        selectedOption.textContent = option.textContent;
        color.classList.add('h-[25px]', 'w-[25px]');
        color.style.backgroundColor = option.getAttribute('data-value');
  
        console.log(select.getAttribute('data-option-name'))
  
        if(select.getAttribute('data-option-name') === 'Color'){
          selectedOption.appendChild(color);
        }
  
        selectedOption.setAttribute('data-selected', option.getAttribute('data-value'));
  
        // Close the dropdown
        optionsList.classList.add('hidden');
  
        // Update the hidden select input value
        const hiddenInput = document.createElement('input');
  
        hiddenInput.type = 'hidden';
        hiddenInput.name = `options[${select.getAttribute('data-option-name')}]`;
        hiddenInput.value = option.getAttribute('data-value');
  
        // Remove any existing hidden input for the same option
        const existingInput = select.parentNode.querySelector(`input[name="options[${select.getAttribute('data-option-name')}]"]`);
        if (existingInput) {
          existingInput.remove();
        }
  
        select.parentNode.appendChild(hiddenInput);
  
        // Trigger the variant change
        const variantSelector = document.querySelector('variant-selector');
        if (variantSelector) {
          variantSelector.onVariantChange();
        }
      });
    });
  
    // Close dropdown on outside click
    document.addEventListener('click', function(e) {
      if (!select.contains(e.target) && !optionsList.contains(e.target)) {
        optionsList.classList.add('hidden');
      }
    });
  });
  });
</script>

<script>
  // Swiper code init
  const swiper = new Swiper('.swiper', {
      direction: 'horizontal',
      slidesPerView: "auto",
      spaceBetween: 30,
    
      pagination: {
          el: '.swiper-pagination'
      },
    
      navigation: {
          prevEl: '.swiper-button-prev',
          nextEl: '.swiper-button-next'
      }
  })
    
  // Zoom effect
  document.querySelectorAll('.image-zoom').forEach(item => {
      document.querySelectorAll('.image-details').forEach(itemDetail => {
          new Drift(item, {
              paneContainer: itemDetail,
              inlinePane: false,
          });
      });
  });
</script>

{% comment %} Variant selector script {% endcomment %}
<script>
   class VariantSelector extends HTMLElement {
  constructor() {
    super();
    this.addEventListener("change", this.onVariantChange.bind(this));
  }
  
  connectedCallback() {
    document.querySelectorAll('.custom-select .option-item').forEach((item) => {
      item.addEventListener('click', () => {
        this.onVariantChange();
      });
    });
  }
  
  onVariantChange() {
    this.getSelectedOptions();
    this.getSelectedVariant();
  
    if (this.currentVariant) {
      this.updateURL();
      this.updateFormID();
      this.updatePrice();
    } else {
      console.warn('No matching variant found.');
    }
  }
  
  getSelectedOptions() {
    this.options = Array.from(this.querySelectorAll('.selected-option'), (select) => select.getAttribute('data-selected'));
    console.log('Selected options:', this.options);
  }
  
  getVariantJSON() {
    if (!this.variantData) {
      const jsonData = this.querySelector('[type="application/json"]').textContent;
      try {
        this.variantData = JSON.parse(jsonData);
      } catch (error) {
        console.error('Failed to parse variant JSON:', error);
        return [];
      }
    }
    return this.variantData;
  }
  
  getSelectedVariant() {
    const variantData = this.getVariantJSON();
    this.currentVariant = variantData.find(variant => {
      return variant.options.every((option, index) => option === this.options[index]);
    });
  
    console.log('Current variant:', this.currentVariant);
  }
  
  updateURL() {
    if (!this.currentVariant) return;
    const url = new URL(window.location);
    url.searchParams.set('variant', this.currentVariant.id);
    window.history.replaceState({}, '', url.toString());
  }
  
  updateFormID() {
    const formInput = document.querySelector("#product-form input[name='id']");
    if (formInput) {
      formInput.value = this.currentVariant.id;
    }
  }
  
  updatePrice() {
    fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
      .then(response => response.text())
      .then(responseText => {
        const html = new DOMParser().parseFromString(responseText, 'text/html');
        const newPrice = html.getElementById(`price-${this.dataset.section}`);
        const oldPrice = document.getElementById(`price-${this.dataset.section}`);
        if (oldPrice && newPrice) {
          oldPrice.innerHTML = newPrice.innerHTML;
        }
      })
      .catch(error => console.error('Failed to update price:', error));
  }
  }
  
  customElements.define("variant-selector", VariantSelector);
</script>


